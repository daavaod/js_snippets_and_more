// ****** Higher-Order Functions ******
// The functions that use other functions as arguments or return functions are named higher-order functions.
// The functions that use only primitives or objects as arguments, and only return primitives or objects are named first-order functions.

const companies= [
  {name: "Company One", category: "Finance", start: 1981, end: 2004},
  {name: "Company Two", category: "Retail", start: 1992, end: 2008},
  {name: "Company Three", category: "Auto", start: 1999, end: 2007},
  {name: "Company Four", category: "Retail", start: 1989, end: 2010},
  {name: "Company Five", category: "Technology", start: 2009, end: 2014},
  {name: "Company Six", category: "Finance", start: 1987, end: 2010},
  {name: "Company Seven", category: "Auto", start: 1986, end: 1996},
  {name: "Company Eight", category: "Technology", start: 2011, end: 2016},
  {name: "Company Nine", category: "Retail", start: 1981, end: 1989}
];

const ages = [33, 12, 20, 16, 5, 54, 21, 44, 61, 13, 15, 45, 25, 64, 32];

// for(let i = 0; i < companies.length; i++) {
//   console.log(companies[i]);
// }

// forEach

// companies.forEach(function(company) {
//   console.log(company.name);
// });

// filter

// Get 21 and older

// let canDrink = [];
// for(let i = 0; i < ages.length; i++) {
//   if(ages[i] >= 21) {
//     canDrink.push(ages[i]);
//   }
// }

// const canDrink = ages.filter(function(age) {
//   if(age >= 21) {
//     return true;
//   }
// });

const canDrink = ages.filter(age => age >= 21);

// Filter retail companies

// const retailCompanies = companies.filter(function(company) {
//   if(company.category === 'Retail') {
//     return true;
//   }
// });

const retailCompanies = companies.filter(company => company.category === 'Retail');

// Get 80s companies

const eightiesCompanies = companies.filter(company => (company.start >= 1980 && company.start < 1990));

// Get companies that lasted 10 years or more

const lastedTenYears = companies.filter(company => (company.end - company.start >= 10));

// map

// Create array of company names
// const companyNames = companies.map(function(company) {
//   return company.name;
// });

// const testMap = companies.map(function(company) {
//   return `${company.name} [${company.start} - ${company.end}]`;
// });

// const testMap = companies.map(company => `${company.name} [${company.start} - ${company.end}]`);

// const ageMap = ages
//   .map(age => Math.sqrt(age))
//   .map(age => age * 2);



// sort

// Sort companies by start year

// const sortedCompanies  = companies.sort(function(c1, c2) {
//   if(c1.start > c2.start) {
//     return 1;
//   } else {
//     return -1;
//   }
// });

// const sortedCompanies = companies.sort((a, b) => (a.start > b.start ? 1 : -1));

// Sort ages
// const sortAges = ages.sort((a, b) => a - b);

// console.log(sortAges);

// ✅ Sort in Descending order
const strArr1 = ['a', 'c', 'z', 'f'];
const descArr = strArr1.sort().reverse();
console.log(descArr); // 👉️ ['z', 'f', 'c', 'a']

// ✅ Sort in Descending order (Alternative)
const strArr2 = ['a', 'c', 'z', 'f'];
const descArr2 = strArr2.sort((a, b) => (a > b ? -1 : 1));
console.log(descArr2); // 👉️ ['z', 'f', 'c', 'a']

// ✅ Sort in ascending order
const strArr3 = ['z', 'c', 'a', 'f'];
const ascArr = strArr3.sort();
console.log(ascArr); // 👉️ ['a', 'c', 'f', 'z']

// with no mutation
// ✅ Sort in Descending order
const strArr1 = ['a', 'c', 'z', 'f'];
const descArr = [...strArr1].sort().reverse();

console.log(descArr); // 👉️ ['z', 'f', 'c', 'a']
console.log(strArr1); // 👉️ ['a', 'c', 'z', 'f']

// ✅ Sort in Descending order (Alternative)
const strArr2 = ['a', 'c', 'z', 'f'];
const descArr2 = [...strArr2].sort((a, b) => (a > b ? -1 : 1));
console.log(descArr2); // 👉️ ['z', 'f', 'c', 'a']


// reduce

// let ageSum = 0;
// for(let i = 0; i < ages.length; i++) {
//   ageSum += ages[i];
// }

// const ageSum = ages.reduce(function(total, age) {
//   return total + age;
// }, 0);

// const ageSum = ages.reduce((total, age) => total + age, 0);

// Get total years for all companies

// const totalYears = companies.reduce(function(total, company) {
//   return total + (company.end - company.start);
// }, 0);

const totalYears = companies.reduce((total, company) => total + (company.end - company.start), 0);

// Combine Methods

const combined = ages
  .map(age => age * 2)
  .filter(age => age >= 40)
  .sort((a, b) => a - b)
  .reduce((a, b) => a + b, 0);

console.log(combined);

// Get the intersection of two arrays
const intersection = (x, y) => {
  const set = new Set(x);
  return [...new Set(y.filter((i) => set.has(i)))];
};

// 🎉 [2]
console.log(intersection([1, 2, 2, 3], [2, 2, 5]));

// Group arrays by function
const groupBy = (arr, fn) =>
  arr.map(fn).reduce((acc, cur, i) => {
    acc[cur] = [...(acc[cur] || []), arr[i]];
    return acc;
  }, {});

// 🎉 { number: [ 1, 3 ], string: [ '2', '4' ] }
console.log(groupBy([1, '2', 3, '4'], (val) => typeof val));

// 🎉 { '1': [ [ 1 ], [ 3 ] ], '2': [ [ 1, 2 ], [ 3, 4 ] ] }
console.log(groupBy([[1], [1, 2], [3], [3, 4]], (val) => val.length));

// Format the bytes
const formatBytes = (bytes, decimals = 2) => {
  if (bytes < 0) return '';
  if (bytes <= 1) return `${bytes} B`;
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return `${parseFloat((bytes / k ** i).toFixed(dm))}${sizes[i]}`;
};

// 🎉 1KB
console.log(formatBytes(1024));

// 🎉 1MB
console.log(formatBytes(1024 ** 2));

// Format money
const formatMoney = (num) =>
  num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');

// 🎉 '20,220,316'
console.log(formatMoney(20220316));

// Generate random string with specified length
const randomString = (len) => {
  const chars = 'abcdefhijkmnprstwxyz123456789ABCDEFGHJKMNPQRSTWXYZ';
  const totalLength = chars.length;
  let randomStr = '';

  for (let i = 0; i < len; i += 1) {
    randomStr += chars.charAt(Math.floor(Math.random() * totalLength));
  }
  return randomStr;
};

// 🎉 'k4RrA5'
console.log(randomString(6));

// Full screen browser
const toFullScreen = () => {
  document.documentElement[
    [
      'requestFullscreen',
      'mozRequestFullScreen',
      'msRequestFullscreen',
      'webkitRequestFullscreen',
    ].find((fn) => typeof document.documentElement[fn] === 'function')
  ]?.();
};

// Valid JSON
const isValidJSON = (str) => {
  try {
    JSON.parse(str);
    return true;
  } catch {
    return false;
  }
};

// 🎉 true
console.log(isValidJSON(JSON.stringify({ age: 30 })));

// 🎉 false
console.log(isValidJSON('{age:30}'));

// array uniques
const numbers = [1,2,2,3,4,4,4,5,6,7,7]
const names = ["John", "Mads", "Bob", "John", "Bob"]

const uniqueNumbers = [...new Set(numbers)]
// [1,2,3,4,5,6,7]
const uniqueNames = [...new Set(names)]
// ['John', 'Mads', 'Bob']

// unique objects from an array by key
let countriesUnique = Object.values(countries.reduce((acc:any, obj:any) => ({ ...acc, [obj.country]: obj }), {}));

// javascript-interview-questions
https://www.interviewbit.com/javascript-interview-questions

// media queries image swap
<picture>
  <source srcset="https://via.placeholder.com/1400" media="(min-width: 1400px)"/>
  <source srcset="https://via.placeholder.com/1200" media="(min-width: 1200px)"/>
  <source srcset="https://via.placeholder.com/800" media="(min-width: 800px)"/>
  <source srcset="https://via.placeholder.com/600" media="(min-width: 600px)"/>
  <img src="https://via.placeholder.com/400" alt="example"/>
</picture>

//𝚜𝚝𝚛𝚒𝚗𝚐 𝚖𝚎𝚝𝚑𝚘𝚍𝚜 cheatsheet
✔ 𝚃𝚑𝚎 𝐬𝐥𝐢𝐜𝐞() 𝚖𝚎𝚝𝚑𝚘𝚍 𝚎𝚡𝚝𝚛𝚊𝚌𝚝𝚜 𝚊 𝚜𝚎𝚌𝚝𝚒𝚘𝚗 𝚘𝚏 𝚊 𝚜𝚝𝚛𝚒𝚗𝚐 𝚊𝚗𝚍 𝚛𝚎𝚝𝚞𝚛𝚗𝚜 𝚒𝚝 𝚊𝚜 𝚊 𝚗𝚎𝚠 𝚜𝚝𝚛𝚒𝚗𝚐, 𝚠𝚒𝚝𝚑𝚘𝚞𝚝 𝚖𝚘𝚍𝚒𝚏𝚢𝚒𝚗𝚐 𝚝𝚑𝚎 𝚘𝚛𝚒𝚐𝚒𝚗𝚊𝚕 𝚜𝚝𝚛𝚒𝚗𝚐.

✔ 𝚃𝚑𝚎 𝐬𝐮𝐛𝐬𝐭𝐫𝐢𝐧𝐠() 𝚖𝚎𝚝𝚑𝚘𝚍 𝚛𝚎𝚝𝚞𝚛𝚗𝚜 𝚝𝚑𝚎 𝚙𝚊𝚛𝚝 𝚘𝚏 𝚝𝚑𝚎 𝚜𝚝𝚛𝚒𝚗𝚐 𝚋𝚎𝚝𝚠𝚎𝚎𝚗 𝚝𝚑𝚎 𝚜𝚝𝚊𝚛𝚝 𝚊𝚗𝚍 𝚎𝚗𝚍 𝚒𝚗𝚍𝚎𝚡𝚎𝚜, 𝚘𝚛 𝚝𝚘 𝚝𝚑𝚎 𝚎𝚗𝚍 𝚘𝚏 𝚝𝚑𝚎 𝚜𝚝𝚛𝚒𝚗𝚐.

✔ 𝚃𝚑𝚎 𝐬𝐮𝐛𝐬𝐭𝐫() 𝚖𝚎𝚝𝚑𝚘𝚍 𝚛𝚎𝚝𝚞𝚛𝚗𝚜 𝚊 𝚙𝚘𝚛𝚝𝚒𝚘𝚗 𝚘𝚏 𝚝𝚑𝚎 𝚜𝚝𝚛𝚒𝚗𝚐, 𝚜𝚝𝚊𝚛𝚝𝚒𝚗𝚐 𝚊𝚝 𝚝𝚑𝚎 𝚜𝚙𝚎𝚌𝚒𝚏𝚒𝚎𝚍 𝚒𝚗𝚍𝚎𝚡 𝚊𝚗𝚍 𝚎𝚡𝚝𝚎𝚗𝚍𝚒𝚗𝚐 𝚏𝚘𝚛 𝚊 𝚐𝚒𝚟𝚎𝚗 𝚗𝚞𝚖𝚋𝚎𝚛 𝚘𝚏 𝚌𝚑𝚊𝚛𝚊𝚌𝚝𝚎𝚛𝚜 𝚊𝚏𝚝𝚎𝚛𝚠𝚊𝚛𝚍𝚜.

✔ 𝚃𝚑𝚎 𝐫𝐞𝐩𝐥𝐚𝐜𝐞() 𝚖𝚎𝚝𝚑𝚘𝚍 𝚛𝚎𝚝𝚞𝚛𝚗𝚜 𝚊 𝚗𝚎𝚠 𝚜𝚝𝚛𝚒𝚗𝚐 𝚠𝚒𝚝𝚑 𝚜𝚘𝚖𝚎 𝚘𝚛 𝚊𝚕𝚕 𝚖𝚊𝚝𝚌𝚑𝚎𝚜 𝚘𝚏 𝚊 𝚙𝚊𝚝𝚝𝚎𝚛𝚗 𝚛𝚎𝚙𝚕𝚊𝚌𝚎𝚍 𝚋𝚢 𝚊 𝚛𝚎𝚙𝚕𝚊𝚌𝚎𝚖𝚎𝚗𝚝. 𝚃𝚑𝚎 𝚙𝚊𝚝𝚝𝚎𝚛𝚗 𝚌𝚊𝚗 𝚋𝚎 𝚊 𝚜𝚝𝚛𝚒𝚗𝚐 𝚘𝚛 𝚊 𝚁𝚎𝚐𝙴𝚡𝚙, 𝚊𝚗𝚍 𝚝𝚑𝚎 𝚛𝚎𝚙𝚕𝚊𝚌𝚎𝚖𝚎𝚗𝚝 𝚌𝚊𝚗 𝚋𝚎 𝚊 𝚜𝚝𝚛𝚒𝚗𝚐 𝚘𝚛 𝚊 𝚏𝚞𝚗𝚌𝚝𝚒𝚘𝚗 𝚝𝚘 𝚋𝚎 𝚌𝚊𝚕𝚕𝚎𝚍 𝚏𝚘𝚛 𝚎𝚊𝚌𝚑 𝚖𝚊𝚝𝚌𝚑. 𝙸𝚏 𝚙𝚊𝚝𝚝𝚎𝚛𝚗 𝚒𝚜 𝚊 𝚜𝚝𝚛𝚒𝚗𝚐, 𝚘𝚗𝚕𝚢 𝚝𝚑𝚎 𝚏𝚒𝚛𝚜𝚝 𝚘𝚌𝚌𝚞𝚛𝚛𝚎𝚗𝚌𝚎 𝚠𝚒𝚕𝚕 𝚋𝚎 𝚛𝚎𝚙𝚕𝚊𝚌𝚎𝚍. 𝚃𝚑𝚎 𝚘𝚛𝚒𝚐𝚒𝚗𝚊𝚕 𝚜𝚝𝚛𝚒𝚗𝚐 𝚒𝚜 𝚕𝚎𝚏𝚝 𝚞𝚗𝚌𝚑𝚊𝚗𝚐𝚎𝚍.

✔ 𝚃𝚑𝚎 𝐩𝐚𝐝𝐒𝐭𝐚𝐫𝐭() 𝚖𝚎𝚝𝚑𝚘𝚍 𝚙𝚊𝚍𝚜 𝚝𝚑𝚎 𝚌𝚞𝚛𝚛𝚎𝚗𝚝 𝚜𝚝𝚛𝚒𝚗𝚐 𝚠𝚒𝚝𝚑 𝚊𝚗𝚘𝚝𝚑𝚎𝚛 𝚜𝚝𝚛𝚒𝚗𝚐 (𝚖𝚞𝚕𝚝𝚒𝚙𝚕𝚎 𝚝𝚒𝚖𝚎𝚜, 𝚒𝚏 𝚗𝚎𝚎𝚍𝚎𝚍) 𝚞𝚗𝚝𝚒𝚕 𝚝𝚑𝚎 𝚛𝚎𝚜𝚞𝚕𝚝𝚒𝚗𝚐 𝚜𝚝𝚛𝚒𝚗𝚐 𝚛𝚎𝚊𝚌𝚑𝚎𝚜 𝚝𝚑𝚎 𝚐𝚒𝚟𝚎𝚗 𝚕𝚎𝚗𝚐𝚝𝚑. 𝚃𝚑𝚎 𝚙𝚊𝚍𝚍𝚒𝚗𝚐 𝚒𝚜 𝚊𝚙𝚙𝚕𝚒𝚎𝚍 𝚏𝚛𝚘𝚖 𝚝𝚑𝚎 𝚜𝚝𝚊𝚛𝚝 𝚘𝚏 𝚝𝚑𝚎 𝚌𝚞𝚛𝚛𝚎𝚗𝚝 𝚜𝚝𝚛𝚒𝚗𝚐.

✔ 𝚃𝚑𝚎 𝐩𝐚𝐝𝐄𝐧𝐝() 𝚖𝚎𝚝𝚑𝚘𝚍 𝚙𝚊𝚍𝚜 𝚝𝚑𝚎 𝚌𝚞𝚛𝚛𝚎𝚗𝚝 𝚜𝚝𝚛𝚒𝚗𝚐 𝚠𝚒𝚝𝚑 𝚊 𝚐𝚒𝚟𝚎𝚗 𝚜𝚝𝚛𝚒𝚗𝚐 (𝚛𝚎𝚙𝚎𝚊𝚝𝚎𝚍, 𝚒𝚏 𝚗𝚎𝚎𝚍𝚎𝚍) 𝚜𝚘 𝚝𝚑𝚊𝚝 𝚝𝚑𝚎 𝚛𝚎𝚜𝚞𝚕𝚝𝚒𝚗𝚐 𝚜𝚝𝚛𝚒𝚗𝚐 𝚛𝚎𝚊𝚌𝚑𝚎𝚜 𝚊 𝚐𝚒𝚟𝚎𝚗 𝚕𝚎𝚗𝚐𝚝𝚑. 𝚃𝚑𝚎 𝚙𝚊𝚍𝚍𝚒𝚗𝚐 𝚒𝚜 𝚊𝚙𝚙𝚕𝚒𝚎𝚍 𝚏𝚛𝚘𝚖 𝚝𝚑𝚎 𝚎𝚗𝚍 𝚘𝚏 𝚝𝚑𝚎 𝚌𝚞𝚛𝚛𝚎𝚗𝚝 𝚜𝚝𝚛𝚒𝚗𝚐.

"wonderful".at(-1)                // l
"wonderful".charAt(2)             // n
"wonderful".concat(" ","house")   // wonderful house
"wonderful".endsWith("q")         // false
"wonderful".startsWith("W")       // true
"wonderful".includes("der")       // true
"wonderful".indexOf("d")          // 3
"wonderful".split("")             // ["w","o","n","d","e","r","f","u","l"]
"wonderful".padStart(20, ".")     // ...........wonderful
"wonderful".padEnd(20, ".")       // wonderful...........
"wonderful".repeat(3)             // wonderfulwonderfulwonderful
"wonderful".replace("ful", "")    // wonder
"wonderful".search("f")           // 6
"wonderful".substr(3,4)           // derf
"wonderful".substring(3,4)        // d
"wonderful".slice(3,4)            // d
"wonderful".toUpperCase()         // WONDERFUL
"wonderful".toLowerCase()         // wonderful

// simple sort by date desc
array.sort(function(a,b){
  return new Date(b.date) - new Date(a.date);
});

// upload file base64
const toBase64 = file => new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = error => reject(error);
});

async function Main() {
   const file = document.querySelector('#myfile').files[0];
   console.log(await toBase64(file));
}

Main();

// with errors
async function Main() {
   const file = document.querySelector('#myfile').files[0];
   try {
      const result = await toBase64(file);
      return result
   } catch(error) {
      console.error(error);
      return;
   }
   //...
}

// group array objects by key
var cars = [{ make: 'audi', model: 'r8', year: '2012' }, { make: 'audi', model: 'rs5', year: '2013' }, { make: 'ford', model: 'mustang', year: '2012' }, { make: 'ford', model: 'fusion', year: '2015' }, { make: 'kia', model: 'optima', year: '2012' }],
    result = cars.reduce(function (r, a) {
        r[a.make] = r[a.make] || [];
        r[a.make].push(a);
        return r;
    }, Object.create(null));

console.log(result);

// Month and Date in 2 digit format?
("0" + this.getDate()).slice(-2) // date
("0" + (this.getMonth() + 1)).slice(-2) // month

// Map months by custom name
const monthNames = ["January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];
const month = monthNames[new Date(obj.start).getMonth()],

// set css var
setCustomStyle() {
  // get document root
  const root = document.querySelector(":root");

  // get table name form table title
  let tableName = this.title.split(" ")[0].toLowerCase();

  // set table name class
  this.classSuffix = tableName;

  // round up items in columns
  let columnItems = Math.ceil(this.documents.length / 2);

  // set global var style
  root.style.setProperty(`--column-items-${tableName}`, columnItems);
},

// Blob
var saveJson = function(obj) {
	var str = JSON.stringify(obj);
	var data = encode( str );

	var blob = new Blob( [ data ], {
		type: 'application/octet-stream'
	});
	
	var url = URL.createObjectURL( blob );
	var link = document.createElement( 'a' );
	link.setAttribute( 'href', url );
	link.setAttribute( 'download', 'data.json' );
	var event = document.createEvent( 'MouseEvents' );
	event.initMouseEvent( 'click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
	link.dispatchEvent( event );
}


var encode = function( s ) {
	var out = [];
	for ( var i = 0; i < s.length; i++ ) {
		out[i] = s.charCodeAt(i);
	}
	return new Uint8Array( out );
}

// Updating properties in multiple objects
const arr1 = [
  {id: 1, name: 'Alice'},
  {id: 1, name: 'Bob'},
  {id: 3, name: 'Charlie'},
];
const newArr = arr1.map(obj => {
  if (obj.id === 1) {
    return {...obj, name: 'Alfred'};
  }

  return obj;
});

//hex to rgb
const hextToRgb = (color: any) => {
	// color without #

	// setting the value to the user input 
	let hexVal = color;

	// turn 3-HEX to 6-HEX
	if ( hexVal.length === 3 ) {
	hexVal = hexVal[0] + hexVal[0] + hexVal[1] + hexVal[1] + hexVal[2] + hexVal[2];
	} 

	// extracting the hex values for RGB
	let red = hexVal.substr(0,2),
	green = hexVal.substr(2,2),
	blue = hexVal.substr(4,2);

	// converting in decimal values
	let red10 = parseInt(red,16),
	green10 = parseInt(green,16),
	blue10 = parseInt(blue,16);

	// stitching it together
	let rgb = red10+','+green10+','+blue10;

	return rgb
}

// group and sort data by month (react example)
const groupByMonth = (data: any) => {
	// group data by month
	const result = data.reduce(function (r:any, a:any) {
	    r[a.mesec] = r[a.mesec] || [];
	    r[a.mesec].push(a);
	    return r;
	}, Object.create(null));

	return result
}
const sortByMonth = (data: any) => {
	const monthNames = ["January", "February", "March", "April", "May", "June",
	    "July", "August", "September", "October", "November", "December"
	];
	const addMonth = data.map((obj:any) => {
	    return {
	    mesec: monthNames[new Date(obj.start).getMonth()],
	    ...obj
	    }
	})

	const newValues = groupByMonth(addMonth);

	// convert to array
	let entries = Object.entries(newValues);

	// sort array by monthNames
	const sortByMonth = entries.sort(function(a:any, b:any){
	    return monthNames.indexOf(a[0]) - monthNames.indexOf(b[0])
	});

	// set filtered events by month
	setCalendarEventsMonth(sortByMonth)
}

// change if else code
// from
const getPriceByName = (name) => {
  if (name === '🍔') {
    return 30
  } else if (name === '🍨') {
    return 20
  } else if (name === '🍿') {
    return 10
  }
}
console.log(getPriceByName('🍔')) // 30

// to
const getPriceByName = (name) => {
  const foodMap = {
    '🍔': 30,
    '🍨': 20,
    '🍿': 10,
    // You can add new food here
    // ...
  }
  return foodMap[ name ]
}
console.log(getPriceByName('🍔')) // 30

// search delay
let timer;              // Timer identifier
const waitTime = 500;   // Wait time in milliseconds 

// Search function
const search = (text) => {
    // TODO: Make HTTP Request HERE
};

// Listen for `keyup` event
const input = document.querySelector('#input-text');
input.addEventListener('keyup', (e) => {
    const text = e.currentTarget.value;

    // Clear timer
    clearTimeout(timer);

    // Wait for X ms and then process the request
    timer = setTimeout(() => {
        search(text);
    }, waitTime);
});

// url params

urlParams() {
    const url = window.location.href;
    const stringItems = new URLSearchParams(url);

    const params = {};

    for(const [key, value] of stringItems) {
	params[key] = value;
    }

    return params;
},
