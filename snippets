// ****** Higher-Order Functions ******
// The functions that use other functions as arguments or return functions are named higher-order functions.
// The functions that use only primitives or objects as arguments, and only return primitives or objects are named first-order functions.

const companies= [
  {name: "Company One", category: "Finance", start: 1981, end: 2004},
  {name: "Company Two", category: "Retail", start: 1992, end: 2008},
  {name: "Company Three", category: "Auto", start: 1999, end: 2007},
  {name: "Company Four", category: "Retail", start: 1989, end: 2010},
  {name: "Company Five", category: "Technology", start: 2009, end: 2014},
  {name: "Company Six", category: "Finance", start: 1987, end: 2010},
  {name: "Company Seven", category: "Auto", start: 1986, end: 1996},
  {name: "Company Eight", category: "Technology", start: 2011, end: 2016},
  {name: "Company Nine", category: "Retail", start: 1981, end: 1989}
];

const ages = [33, 12, 20, 16, 5, 54, 21, 44, 61, 13, 15, 45, 25, 64, 32];

// for(let i = 0; i < companies.length; i++) {
//   console.log(companies[i]);
// }

// forEach

// companies.forEach(function(company) {
//   console.log(company.name);
// });

// filter

// Get 21 and older

// let canDrink = [];
// for(let i = 0; i < ages.length; i++) {
//   if(ages[i] >= 21) {
//     canDrink.push(ages[i]);
//   }
// }

// const canDrink = ages.filter(function(age) {
//   if(age >= 21) {
//     return true;
//   }
// });

const canDrink = ages.filter(age => age >= 21);

// Filter retail companies

// const retailCompanies = companies.filter(function(company) {
//   if(company.category === 'Retail') {
//     return true;
//   }
// });

const retailCompanies = companies.filter(company => company.category === 'Retail');

// Get 80s companies

const eightiesCompanies = companies.filter(company => (company.start >= 1980 && company.start < 1990));

// Get companies that lasted 10 years or more

const lastedTenYears = companies.filter(company => (company.end - company.start >= 10));

// map

// Create array of company names
// const companyNames = companies.map(function(company) {
//   return company.name;
// });

// const testMap = companies.map(function(company) {
//   return `${company.name} [${company.start} - ${company.end}]`;
// });

// const testMap = companies.map(company => `${company.name} [${company.start} - ${company.end}]`);

// const ageMap = ages
//   .map(age => Math.sqrt(age))
//   .map(age => age * 2);



// sort

// Sort companies by start year

// const sortedCompanies  = companies.sort(function(c1, c2) {
//   if(c1.start > c2.start) {
//     return 1;
//   } else {
//     return -1;
//   }
// });

// const sortedCompanies = companies.sort((a, b) => (a.start > b.start ? 1 : -1));

// Sort ages
// const sortAges = ages.sort((a, b) => a - b);

// console.log(sortAges);


// reduce

// let ageSum = 0;
// for(let i = 0; i < ages.length; i++) {
//   ageSum += ages[i];
// }

// const ageSum = ages.reduce(function(total, age) {
//   return total + age;
// }, 0);

// const ageSum = ages.reduce((total, age) => total + age, 0);

// Get total years for all companies

// const totalYears = companies.reduce(function(total, company) {
//   return total + (company.end - company.start);
// }, 0);

const totalYears = companies.reduce((total, company) => total + (company.end - company.start), 0);

// Combine Methods

const combined = ages
  .map(age => age * 2)
  .filter(age => age >= 40)
  .sort((a, b) => a - b)
  .reduce((a, b) => a + b, 0);

console.log(combined);

// Get the intersection of two arrays
const intersection = (x, y) => {
  const set = new Set(x);
  return [...new Set(y.filter((i) => set.has(i)))];
};

// ðŸŽ‰ [2]
console.log(intersection([1, 2, 2, 3], [2, 2, 5]));

// Group arrays by function
const groupBy = (arr, fn) =>
  arr.map(fn).reduce((acc, cur, i) => {
    acc[cur] = [...(acc[cur] || []), arr[i]];
    return acc;
  }, {});

// ðŸŽ‰ { number: [ 1, 3 ], string: [ '2', '4' ] }
console.log(groupBy([1, '2', 3, '4'], (val) => typeof val));

// ðŸŽ‰ { '1': [ [ 1 ], [ 3 ] ], '2': [ [ 1, 2 ], [ 3, 4 ] ] }
console.log(groupBy([[1], [1, 2], [3], [3, 4]], (val) => val.length));

// Format the bytes
const formatBytes = (bytes, decimals = 2) => {
  if (bytes < 0) return '';
  if (bytes <= 1) return `${bytes} B`;
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return `${parseFloat((bytes / k ** i).toFixed(dm))}${sizes[i]}`;
};

// ðŸŽ‰ 1KB
console.log(formatBytes(1024));

// ðŸŽ‰ 1MB
console.log(formatBytes(1024 ** 2));

// Format money
const formatMoney = (num) =>
  num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');

// ðŸŽ‰ '20,220,316'
console.log(formatMoney(20220316));

// Generate random string with specified length
const randomString = (len) => {
  const chars = 'abcdefhijkmnprstwxyz123456789ABCDEFGHJKMNPQRSTWXYZ';
  const totalLength = chars.length;
  let randomStr = '';

  for (let i = 0; i < len; i += 1) {
    randomStr += chars.charAt(Math.floor(Math.random() * totalLength));
  }
  return randomStr;
};

// ðŸŽ‰ 'k4RrA5'
console.log(randomString(6));

// Full screen browser
const toFullScreen = () => {
  document.documentElement[
    [
      'requestFullscreen',
      'mozRequestFullScreen',
      'msRequestFullscreen',
      'webkitRequestFullscreen',
    ].find((fn) => typeof document.documentElement[fn] === 'function')
  ]?.();
};

// Valid JSON
const isValidJSON = (str) => {
  try {
    JSON.parse(str);
    return true;
  } catch {
    return false;
  }
};

// ðŸŽ‰ true
console.log(isValidJSON(JSON.stringify({ age: 30 })));

// ðŸŽ‰ false
console.log(isValidJSON('{age:30}'));









